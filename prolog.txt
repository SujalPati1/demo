% Check if a number is even
is_even(N) :- 0 is N mod 2.

% Check if a number is odd
is_odd(N) :- 1 is N mod 2.

% Add two numbers
add(A, B, Sum) :- Sum is A + B.

% Subtract two numbers
subtract(A, B, Result) :- Result is A - B.

% Multiply two numbers
multiply(A, B, Product) :- Product is A * B.

% Divide two numbers
divide(A, B, Result) :- B \= 0, Result is A / B.



factorial(0, 1).  % base case
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.




% GCD using Euclidean algorithm
gcd(A, 0, A) :- A > 0.
gcd(A, B, G) :-
    B > 0,
    R is A mod B,
    gcd(B, R, G).

% LCM using GCD
lcm(A, B, LCM) :-
    gcd(A, B, G),
    LCM is (A * B) // G.





% Check if a number is prime
is_prime(2).
is_prime(3).
is_prime(N) :-
    N > 3,
    N mod 2 =\= 0,
    \+ has_factor(N, 3).

% Helper to check for factors
has_factor(N, F) :-
    N mod F =:= 0.
has_factor(N, F) :-
    F * F < N,
    F2 is F + 2,
    has_factor(N, F2).





max_in_list([X], X).
max_in_list([H|T], Max) :-
    max_in_list(T, TempMax),
    Max is max(H, TempMax).





min_in_list([X], X).
min_in_list([H|T], Min) :-
    min_in_list(T, TempMin),
    Min is min(H, TempMin).





% Facts
father(john, bob).
father(john, alice).
mother(mary, bob).
mother(mary, alice).
father(bob, tom).
mother(susan, tom).

% Rules
parent(X, Y) :- father(X, Y).
parent(X, Y) :- mother(X, Y).

sibling(X, Y) :-
    parent(Z, X),
    parent(Z, Y),
    X \= Y.

grandparent(X, Y) :-
    parent(X, Z),
    parent(Z, Y).

ancestor(X, Y) :-
    parent(X, Y).
ancestor(X, Y) :-
    parent(X, Z),
    ancestor(Z, Y).
